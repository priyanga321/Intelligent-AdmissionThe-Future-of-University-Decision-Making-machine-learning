# -*- coding: utf-8 -*-
"""Admission university.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15IRwvceAAXy4s8qg_Su1d1hPzPuUPqdj
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# read_csv is a pandas function to read csv files
data = pd.read_csv('Admission_Predict.csv')

data.info()

data.info()

#let us rename the column change of admit becase it has trainling space
data=data.rename(columns = {'Chance of Admit ':'Chance of Admit'})

data.describe()

sns.pairplot(data=data, hue='Research',markers=["^", "v"],palette='inferno')

sns.scatterplot(x='University Rating',y='CGPA',data=data,color='Red', s=100)

category = ['GRE Score', 'TOEFL Score', 'University Rating','SOP','LOR ','CGPA', 'Research', 'Chance of Admit']
color = ['yellowgreen','gold', 'lightskyblue', 'pink', 'red', 'purple', 'orange','gray']
start = True
for i in np.arange(4):
  fig = plt.figure(figsize=(14,8))
  plt.subplot2grid((4,2),(i,0))
  data[category[2*i]].hist(color=color[2*i],bins=10)
  plt.title(category[2*i])
  plt.subplot2grid((4,2),(i,1))
  data[category[2*i+1]].hist(color=color[2*i+1],bins=10)
  plt.title(category[2+i+1])
  plt.subplots_adjust(hspace= 0.7, wspace = 0.2) 
plt.show()

import numpy as np
from sklearn.preprocessing import MinMaxScaler

# Define a NumPy array
x = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])

# Create an instance of the scaler
sc = MinMaxScaler()

# Scale the features
x_scaled = sc.fit_transform(x)

x = data.iloc[:, 0:7].values

y=data.iloc[:,7:].values
y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.30, random_state=101)
#random_state acts as the seed for the random number generator during the split

y_train=(y_train>0.5)
y_train

y_test=(y_test>0.5)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# %matplotlib inline

data = pd.read_csv('Admission_Predict.csv')

data.info()

data = data.rename(columns={'Chance of Admit ': 'Chance of Admit'})

data.describe()

sns.pairplot(data=data, hue='Research', markers=["^", "v"], palette='inferno')

sns.scatterplot(x='University Rating', y='CGPA', data=data, color='Red', s=100)

category = ['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR ', 'CGPA', 'Research', 'Chance of Admit']
color = ['yellowgreen','gold', 'lightskyblue', 'pink', 'red', 'purple', 'orange','gray']
start = True
for i in np.arange(4):
    fig = plt.figure(figsize=(14,8))
    plt.subplot2grid((4,2),(i,0))
    data[category[2*i]].hist(color=color[2*i],bins=10)
    plt.title(category[2*i])
    plt.subplot2grid((4,2),(i,1))
    data[category[2*i+1]].hist(color=color[2*i+1],bins=10)
    plt.title(category[2*i+1])
    plt.subplots_adjust(hspace= 0.7, wspace = 0.2) 
plt.show()

# Scale the feature matrix
sc = MinMaxScaler()
x = data.iloc[:, 1:8].values
x = sc.fit_transform(x)

y = data.iloc[:, 8].values
y = (y > 0.5)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=101)

cls = LogisticRegression(random_state=0)
lr = cls.fit(x_train, y_train)

y_pred = lr.predict(x_test)

from sklearn.metrics import accuracy_score, recall_score, roc_auc_score, confusion_matrix
print("\nAccuracy score: %f" %(accuracy_score(y_test, y_pred)*100))
print("Recall score: %f" %(recall_score(y_test, y_pred)*100))
print("ROC score: %f\n" %(roc_auc_score(y_test, y_pred)*100))
print(confusion_matrix(y_test, y_pred))

from sklearn.metrics import accuracy_score, recall_score, roc_auc_score, confusion_matrix

from sklearn.metrics import accuracy_score, recall_score, roc_auc_score



import numpy as np
from flask import Flask, request, jsonify, render_template
import pickle 
from tensorflow.keras.models import load_model

app = Flask(__name__)
# Load the model
#model = pickle.load(open('university.pkl', 'rb'))
model = load_model('model.h5')

# Load your trained model 
from tensorflow.keras.models import load_model
model = load_model('model.h5')

@app.route('/')
def home():
    return render_template('Demo2.html')

app.route('/y_predict', methods=['POST'])
def y_predict():
    #min max scaling
    min1=[290.0, 92.0, 1.0, 1.0, 1.0, 6.8, 0.0] 
    max1=[340.0, 120.0, 5.0, 5.0, 5.0, 9.92, 1.0] 
    k= [float(x) for x in request.form.values()]
    for i in range(7):
        result=(k[i]-min1[i])/(max1[i]-min1[i]) 
        p.append(result)
    prediction = model.predict([p]) 
    print(prediction)
    output=prediction[0]
    if(output==false):
        return render_template('noChance.html', prediction_text='You Dont have a chance of getting adwis')
    else:
        return render_template('chance.html', prediction_text='You have a chance of getting adwis')

if __name__ == "__main__":
    app.run(debug=False)

def some_function():
    if some_condition:
        return render_template('template1.html')
    else:
        return render_template('template2.html')

if __name__ == '__main__':
    app.run(debug=False)

from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return 'Welcome to the Drug Classification App!'

if __name__ == '__main__':
    # Run the app using a production WSGI server (e.g. gunicorn)
    app.run()